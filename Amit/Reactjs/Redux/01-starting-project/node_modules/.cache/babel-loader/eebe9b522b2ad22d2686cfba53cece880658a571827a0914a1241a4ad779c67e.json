{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nconst initalCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initalCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    //payload  change name in the store\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst authInitialState = {\n  isAuthanticated: false\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: authInitialState,\n  reducers: {\n    login(state) {\n      state.isAuthanticated = true;\n    },\n    logout(state) {\n      state.isAuthanticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     return state;\n// }\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterAction = counterSlice.actions;\nexport default store;","map":{"version":3,"names":["createSlice","configureStore","initalCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","authInitialState","isAuthanticated","authSlice","login","logout","store","reducer","counterAction","actions"],"sources":["/home/amit_chaudhary/personal Trash projects/React.Js/Redux/01-starting-project/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"\n\n\nconst initalCounterState = {\n    counter: 0,\n    showCounter: true\n}\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initalCounterState,\n    reducers: {\n        increment(state) { state.counter++ },\n        decrement(state) { state.counter-- },\n        increase(state, action) { state.counter = state.counter + action.payload },//payload  change name in the store\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter\n        }\n    }\n})\n\nconst authInitialState = {\n    isAuthanticated: false\n\n}\n\nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState: authInitialState,\n    reducers: {\n        login(state) { state.isAuthanticated = true },\n        logout(state) { state.isAuthanticated = false }\n    }\n})\n\n\n// const counterReducer = (state = { counter: 0, showCounter: true }, action) => {\n//     if (action.type === 'increment') {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'increase') {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     if (action.type === 'decrement') {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: state.showCounter\n//         }\n//     }\n//     return state;\n// }\n\nconst store = configureStore({ reducer: counterSlice.reducer });\nexport const counterAction = counterSlice.actions;\nexport default store;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAG9D,MAAMC,kBAAkB,GAAG;EACvBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;AACD,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,kBAAkB;EAChCM,QAAQ,EAAE;IACNC,SAASA,CAACC,KAAK,EAAE;MAAEA,KAAK,CAACP,OAAO,EAAE;IAAC,CAAC;IACpCQ,SAASA,CAACD,KAAK,EAAE;MAAEA,KAAK,CAACP,OAAO,EAAE;IAAC,CAAC;IACpCS,QAAQA,CAACF,KAAK,EAAEG,MAAM,EAAE;MAAEH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAAC,CAAC;IAAC;IAC3EC,aAAaA,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AAErB,CAAC;AAED,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACNW,KAAKA,CAACT,KAAK,EAAE;MAAEA,KAAK,CAACO,eAAe,GAAG,IAAI;IAAC,CAAC;IAC7CG,MAAMA,CAACV,KAAK,EAAE;MAAEA,KAAK,CAACO,eAAe,GAAG,KAAK;IAAC;EAClD;AACJ,CAAC,CAAC;;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;EAAEqB,OAAO,EAAEjB,YAAY,CAACiB;AAAQ,CAAC,CAAC;AAC/D,OAAO,MAAMC,aAAa,GAAGlB,YAAY,CAACmB,OAAO;AACjD,eAAeH,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}