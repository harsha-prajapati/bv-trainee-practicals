{"ast":null,"code":"var _jsxFileName = \"/home/parisuddha_pedapudi/Desktop/React forms/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const nameInputRef = useRef();\n  const [enteredInput, setEnterdInput] = useState();\n  const [enterdInputIsValid, setEnterdInputIsValid] = useState(false);\n  const [enterNameIsTouched, setEnteredNameIsTouched] = useState(false);\n  useEffect(() => {\n    if (enterdInputIsValid) {\n      console.log(\"Name Input Is Valid\");\n    }\n  }, [enterdInputIsValid]);\n  const nameInputChangeHandler = event => {\n    setEnterdInput(event.target.value);\n    if (enteredInput.trim() !== \"\") {\n      setEnterdInputIsValid(true);\n    }\n  };\n  const nameInputBlurHandler = event => {\n    setEnteredNameIsTouched(true);\n    if (enteredInput.trim() === \"\") {\n      setEnterdInputIsValid(false);\n      return;\n    }\n  };\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameIsTouched(true);\n    if (enteredInput.trim() === \"\") {\n      setEnterdInputIsValid(false);\n      return;\n    }\n    setEnterdInputIsValid(true);\n    console.log(enteredInput);\n    setEnterdInput('');\n  };\n  const nameInputIsInvalid = !enterdInputIsValid && enterNameIsTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"name is not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"DIpvLq1UUB75CA5dhLVRv77p4qQ=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","nameInputRef","enteredInput","setEnterdInput","enterdInputIsValid","setEnterdInputIsValid","enterNameIsTouched","setEnteredNameIsTouched","console","log","nameInputChangeHandler","event","target","value","trim","nameInputBlurHandler","formSubmitHandler","preventDefault","nameInputIsInvalid","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","id","onBlur","onChange","_c","$RefreshReg$"],"sources":["/home/parisuddha_pedapudi/Desktop/React forms/src/components/SimpleInput.js"],"sourcesContent":["import {useEffect, useRef,useState} from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef=useRef();\n  const [enteredInput, setEnterdInput]=useState();\n  const [enterdInputIsValid, setEnterdInputIsValid]=useState(false);\n  const [enterNameIsTouched,setEnteredNameIsTouched]= useState(false);\n\n\n  useEffect(()=>{\n    if(enterdInputIsValid){\n      console.log(\"Name Input Is Valid\");\n    }\n  },[enterdInputIsValid])\n\n  const nameInputChangeHandler=(event)=>{\n       setEnterdInput(event.target.value);\n\n       if(enteredInput.trim() !== \"\"){\n        setEnterdInputIsValid(true);\n        \n      } \n  } ;\n\n  const nameInputBlurHandler=(event)=>{\n    setEnteredNameIsTouched(true);\n\n    if(enteredInput.trim() === \"\"){\n      setEnterdInputIsValid(false);\n      return;\n    } \n     \n  };\n\n  const formSubmitHandler=(event)=>{\n    event.preventDefault();\n    setEnteredNameIsTouched(true);\n\n    if(enteredInput.trim() === \"\"){\n      setEnterdInputIsValid(false);\n      return;\n    }\n    setEnterdInputIsValid(true);\n\n    console.log(enteredInput);\n    setEnterdInput('');\n\n  };\n  \n  const nameInputIsInvalid= !enterdInputIsValid && enterNameIsTouched;\n  const nameInputClasses=nameInputIsInvalid ? 'form-control invalid':'form-control' ;\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        ref={nameInputRef}\n        type = 'text' \n        id = 'name' \n        onBlur={nameInputBlurHandler}\n        onChange={nameInputChangeHandler}\n        />\n      {nameInputIsInvalid && <p className=\"error-text\">name is not be empty</p>}\n        \n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}